// AirportsPipeline is responsible for creating ETL pipeline.
// It will extract the dataset (csv file) from the web, interprets and loads it into SQLite database.
pipeline AirportsPipeline {

    // Fetch csv from the web using url.
    // Input type: None
    // Output type: File
	block AirportsExtractor oftype HttpExtractor {
		url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv";
	}

    // Interprets the File as a TextFile.
    // Input type: File
    // Output type: TextFile
	block AirportsTextFileInterpreter oftype TextFileInterpreter {

	}

    // Interprets the TextFile as a csv-file containing string-values delimited by ;. 
    // Input type: TextFile
    // Output type: Sheet
	block AirportsCSVInterpreter oftype CSVInterpreter {
		delimiter: ';';
	}

    // Interprets the Sheet about airports with a topmost header row and interprets it as a Table by assigning a primitive valuetype to each column. 
    // Input type: Sheet
    // Output type: Table
	block AirportsTableInterpreter oftype TableInterpreter {
		header: true;
		columns: [
			"column_1" oftype integer,
            "column_2" oftype text,
            "column_3" oftype text,
            "column_4" oftype text,
            "column_5" oftype text,
			"column_6" oftype text,
            "column_7" oftype decimal,
            "column_8" oftype decimal,
            "column_9" oftype integer,
            "column_10" oftype decimal,
            "column_11" oftype text,
            "column_12" oftype text,
            "geo_punkt" oftype text
		];
	}

    // Loads the Table: airports into a SQLite database: airports.sqlite.
    // Input type: Table
    // Output type: None
	block AirportsLoader oftype SQLiteLoader {
		table: "airports";
		file: "./airports.sqlite";
	}

    // Builds a chain of computing steps.
    AirportsExtractor 
        -> AirportsTextFileInterpreter
        -> AirportsCSVInterpreter
        -> AirportsTableInterpreter
        -> AirportsLoader;
}