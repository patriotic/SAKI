// GTFSPipeline is responsible for creating ETL pipeline.
pipeline GTFSPipeline {
    // None -> File
    block GTFSFileExtractor oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    // File -> FileSystem
    block GTFSZipArchiveInterpreter oftype ArchiveInterpreter {
       archiveType: "zip";
    }

    // FileSystem -> File
    block GTFSFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

    // File -> TextFile
    block GTFSTextFileInterpreter oftype TextFileInterpreter {}

    // TextFile -> Sheet
    block GTFSCSVInterpreter oftype CSVInterpreter {
        enclosing: '"';
    }

    // Coordinates with the constraint of -90 to 90 including upper/lower bounds.
    valuetype Coordinates oftype decimal {
        constraints: [ CoordinatesRangeConstraint ]; 
    }

    constraint CoordinatesRangeConstraint oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
    }
 
     // Filter stops with zone id 2001
    valuetype ZoneID oftype integer {
        constraints: [ ZoneIDRangeConstraint ];
    }

    constraint ZoneIDRangeConstraint oftype RangeConstraint {
        lowerBound: 2001;
        upperBound: 2001;
    }

    // Sheet -> Table
    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns:[
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype Coordinates,
            "stop_lon" oftype Coordinates,
            "zone_id" oftype ZoneID
        ];
    }

    // Table -> None
    block GTFSLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }

    // Builds a chain of computing steps.
    GTFSFileExtractor 
        -> GTFSZipArchiveInterpreter
        -> GTFSFilePicker
        -> GTFSTextFileInterpreter
        -> GTFSCSVInterpreter
        -> GTFSTableInterpreter
        -> GTFSLoader;
}